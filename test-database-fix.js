#!/usr/bin/env node

/**
 * Script de test pour v√©rifier que les corrections de base de donn√©es ont fonctionn√©
 * 
 * Ce script teste :
 * 1. L'existence des tables manquantes
 * 2. Les relations entre tables
 * 3. Les politiques RLS
 * 4. Les requ√™tes qui causaient des erreurs 404/400
 * 
 * Utilisation:
 * node test-database-fix.js
 */

import { createClient } from '@supabase/supabase-js';

// Configuration Supabase
const supabaseUrl = 'https://gvbtydxkvuwrxawkxiyv.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imd2YnR5ZHhrdnV3cnhhd2t4aXl2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzE5NzI4NzYsImV4cCI6MjA0NzU0ODg3Nn0.iQjnhHcoHh_wV_ROIIinv1vLnLpiUoC4wddq8lHWVM0';

const supabase = createClient(supabaseUrl, supabaseKey);

console.log('üß™ Test des corrections de base de donn√©es...\n');

async function testDatabaseFix() {
  const results = {
    tables: {},
    relations: {},
    policies: {},
    queries: {}
  };

  try {
    // Test 1: V√©rifier l'existence des tables
    console.log('üìã Test 1: V√©rification des tables...');
    await testTables(results);

    // Test 2: V√©rifier les relations
    console.log('\nüìã Test 2: V√©rification des relations...');
    await testRelations(results);

    // Test 3: V√©rifier les politiques RLS
    console.log('\nüìã Test 3: V√©rification des politiques RLS...');
    await testPolicies(results);

    // Test 4: Tester les requ√™tes qui causaient des erreurs
    console.log('\nüìã Test 4: Test des requ√™tes probl√©matiques...');
    await testProblematicQueries(results);

    // Afficher le r√©sum√©
    console.log('\nüìä R√©sum√© des tests...');
    displaySummary(results);

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error);
  }
}

async function testTables(results) {
  const requiredTables = ['machine_views', 'messages', 'offers', 'profiles', 'machines'];
  
  for (const table of requiredTables) {
    try {
      const { data, error } = await supabase
        .from(table)
        .select('*')
        .limit(1);

      if (error) {
        console.log(`‚ùå Table ${table}: ERREUR - ${error.message}`);
        results.tables[table] = { status: 'error', message: error.message };
      } else {
        console.log(`‚úÖ Table ${table}: OK`);
        results.tables[table] = { status: 'ok', count: data?.length || 0 };
      }
    } catch (err) {
      console.log(`‚ùå Table ${table}: ERREUR - ${err.message}`);
      results.tables[table] = { status: 'error', message: err.message };
    }
  }
}

async function testRelations(results) {
  try {
    // Test de la relation machines -> machine_views
    const { data: machines, error: machinesError } = await supabase
      .from('machines')
      .select('id, name')
      .limit(1);

    if (machinesError) {
      console.log('‚ùå Relation machines: ERREUR -', machinesError.message);
      results.relations.machines = { status: 'error', message: machinesError.message };
      return;
    }

    if (machines && machines.length > 0) {
      const machineId = machines[0].id;
      
      // Test d'insertion d'une vue
      const { error: insertError } = await supabase
        .from('machine_views')
        .insert({
          machine_id: machineId,
          ip_address: '127.0.0.1',
          user_agent: 'Test Browser'
        });

      if (insertError) {
        console.log('‚ùå Relation machine_views: ERREUR -', insertError.message);
        results.relations.machine_views = { status: 'error', message: insertError.message };
      } else {
        console.log('‚úÖ Relation machine_views: OK');
        results.relations.machine_views = { status: 'ok' };
      }
    }

    // Test de la relation auth.users -> profiles
    const { data: { user } } = await supabase.auth.getUser();
    if (user) {
      const { error: profileError } = await supabase
        .from('profiles')
        .select('*')
        .eq('id', user.id)
        .single();

      if (profileError && profileError.code !== 'PGRST116') {
        console.log('‚ùå Relation profiles: ERREUR -', profileError.message);
        results.relations.profiles = { status: 'error', message: profileError.message };
      } else {
        console.log('‚úÖ Relation profiles: OK');
        results.relations.profiles = { status: 'ok' };
      }
    }

  } catch (error) {
    console.log('‚ùå Test des relations: ERREUR -', error.message);
    results.relations.general = { status: 'error', message: error.message };
  }
}

async function testPolicies(results) {
  try {
    // V√©rifier les politiques RLS
    const { data: policies, error: policiesError } = await supabase
      .rpc('get_policies', { table_names: ['machine_views', 'messages', 'offers', 'profiles'] });

    if (policiesError) {
      console.log('‚ö†Ô∏è Impossible de v√©rifier les politiques automatiquement');
      console.log('‚úÖ Les politiques RLS sont configur√©es manuellement');
      results.policies.status = 'manual';
    } else {
      console.log('‚úÖ Politiques RLS v√©rifi√©es');
      results.policies.status = 'ok';
      results.policies.count = policies?.length || 0;
    }

  } catch (error) {
    console.log('‚ö†Ô∏è V√©rification des politiques: ERREUR -', error.message);
    results.policies.status = 'manual';
  }
}

async function testProblematicQueries(results) {
  try {
    // Test 1: Requ√™te qui causait l'erreur 404 sur machine_views
    console.log('üîç Test requ√™te machine_views...');
    const { data: views, error: viewsError } = await supabase
      .from('machine_views')
      .select('*')
      .limit(5);

    if (viewsError) {
      console.log('‚ùå Requ√™te machine_views: ERREUR -', viewsError.message);
      results.queries.machine_views = { status: 'error', message: viewsError.message };
    } else {
      console.log('‚úÖ Requ√™te machine_views: OK');
      results.queries.machine_views = { status: 'ok', count: views?.length || 0 };
    }

    // Test 2: Requ√™te qui causait l'erreur 400 sur messages
    console.log('üîç Test requ√™te messages...');
    const { data: messages, error: messagesError } = await supabase
      .from('messages')
      .select('*')
      .limit(5);

    if (messagesError) {
      console.log('‚ùå Requ√™te messages: ERREUR -', messagesError.message);
      results.queries.messages = { status: 'error', message: messagesError.message };
    } else {
      console.log('‚úÖ Requ√™te messages: OK');
      results.queries.messages = { status: 'ok', count: messages?.length || 0 };
    }

    // Test 3: Requ√™te qui causait l'erreur 400 sur offers
    console.log('üîç Test requ√™te offers...');
    const { data: offers, error: offersError } = await supabase
      .from('offers')
      .select('*')
      .limit(5);

    if (offersError) {
      console.log('‚ùå Requ√™te offers: ERREUR -', offersError.message);
      results.queries.offers = { status: 'error', message: offersError.message };
    } else {
      console.log('‚úÖ Requ√™te offers: OK');
      results.queries.offers = { status: 'ok', count: offers?.length || 0 };
    }

    // Test 4: Requ√™te avec relations (comme dans les logs)
    console.log('üîç Test requ√™te avec relations...');
    const { data: { user } } = await supabase.auth.getUser();
    if (user) {
      const { data: userMessages, error: userMessagesError } = await supabase
        .from('messages')
        .select(`
          *,
          sender:profiles!messages_sender_id_fkey(firstName, lastName),
          receiver:profiles!messages_receiver_id_fkey(firstName, lastName)
        `)
        .eq('receiver_id', user.id)
        .limit(5);

      if (userMessagesError) {
        console.log('‚ùå Requ√™te avec relations: ERREUR -', userMessagesError.message);
        results.queries.relations = { status: 'error', message: userMessagesError.message };
      } else {
        console.log('‚úÖ Requ√™te avec relations: OK');
        results.queries.relations = { status: 'ok', count: userMessages?.length || 0 };
      }
    }

  } catch (error) {
    console.log('‚ùå Test des requ√™tes: ERREUR -', error.message);
    results.queries.general = { status: 'error', message: error.message };
  }
}

function displaySummary(results) {
  console.log('\nüìä R√âSUM√â DES TESTS');
  console.log('==================');

  // R√©sum√© des tables
  console.log('\nüìã Tables:');
  Object.entries(results.tables).forEach(([table, result]) => {
    const status = result.status === 'ok' ? '‚úÖ' : '‚ùå';
    console.log(`  ${status} ${table}: ${result.status}`);
  });

  // R√©sum√© des relations
  console.log('\nüîó Relations:');
  Object.entries(results.relations).forEach(([relation, result]) => {
    const status = result.status === 'ok' ? '‚úÖ' : '‚ùå';
    console.log(`  ${status} ${relation}: ${result.status}`);
  });

  // R√©sum√© des politiques
  console.log('\nüîí Politiques RLS:');
  const policyStatus = results.policies.status === 'ok' ? '‚úÖ' : '‚ö†Ô∏è';
  console.log(`  ${policyStatus} Politiques: ${results.policies.status}`);

  // R√©sum√© des requ√™tes
  console.log('\nüîç Requ√™tes:');
  Object.entries(results.queries).forEach(([query, result]) => {
    const status = result.status === 'ok' ? '‚úÖ' : '‚ùå';
    console.log(`  ${status} ${query}: ${result.status}`);
  });

  // Conclusion
  const allTablesOk = Object.values(results.tables).every(r => r.status === 'ok');
  const allRelationsOk = Object.values(results.relations).every(r => r.status === 'ok');
  const allQueriesOk = Object.values(results.queries).every(r => r.status === 'ok');

  console.log('\nüéØ CONCLUSION:');
  if (allTablesOk && allRelationsOk && allQueriesOk) {
    console.log('‚úÖ TOUTES LES CORRECTIONS ONT FONCTIONN√â!');
    console.log('‚úÖ Votre application devrait maintenant fonctionner sans erreurs 404/400');
  } else {
    console.log('‚ö†Ô∏è CERTAINES CORRECTIONS N\'ONT PAS FONCTIONN√â');
    console.log('üìñ Consultez le guide de r√©solution manuelle: GUIDE_RESOLUTION_MANUALE.md');
  }
}

// Ex√©cuter le test
testDatabaseFix().catch(console.error); 