const fs = require('fs');
const path = require('path');

console.log('üß™ Test simple du widget d\'√©volution des ventes...');

// V√©rifier que le fichier existe
const filePath = path.join(__dirname, 'src', 'pages', 'EnterpriseDashboard.tsx');
if (!fs.existsSync(filePath)) {
  console.error('‚ùå Fichier EnterpriseDashboard.tsx non trouv√©');
  process.exit(1);
}

// Lire le fichier
const content = fs.readFileSync(filePath, 'utf8');

// V√©rifications
const checks = [
  {
    name: 'Composant SalesEvolutionWidgetEnriched d√©fini',
    test: content.includes('const SalesEvolutionWidgetEnriched = ({ data = [] }: { data?: any[] }) => {'),
    success: '‚úÖ Composant d√©fini',
    error: '‚ùå Composant non trouv√©'
  },
  {
    name: 'Fonction renderWidgetContent existe',
    test: content.includes('const renderWidgetContent = (widget: any) => {'),
    success: '‚úÖ Fonction renderWidgetContent trouv√©e',
    error: '‚ùå Fonction renderWidgetContent non trouv√©e'
  },
  {
    name: 'Case chart utilise SalesEvolutionWidgetEnriched',
    test: content.includes('case \'chart\':') && content.includes('SalesEvolutionWidgetEnriched'),
    success: '‚úÖ Case chart utilise le widget enrichi',
    error: '‚ùå Case chart n\'utilise pas le widget enrichi'
  },
  {
    name: 'Fonction getChartData existe',
    test: content.includes('const getChartData = (widgetId: string) => {'),
    success: '‚úÖ Fonction getChartData trouv√©e',
    error: '‚ùå Fonction getChartData non trouv√©e'
  },
  {
    name: 'Donn√©es sales-evolution dans getChartData',
    test: content.includes('\'sales-evolution\':'),
    success: '‚úÖ Donn√©es sales-evolution trouv√©es',
    error: '‚ùå Donn√©es sales-evolution non trouv√©es'
  },
  {
    name: 'Return statement du composant',
    test: content.includes('return (') && content.includes('√âvolution des Ventes'),
    success: '‚úÖ Return statement trouv√©',
    error: '‚ùå Return statement non trouv√©'
  }
];

console.log('\nüìã R√©sultats des v√©rifications:');
let allPassed = true;

checks.forEach(check => {
  if (check.test) {
    console.log(check.success);
  } else {
    console.log(check.error);
    allPassed = false;
  }
});

if (allPassed) {
  console.log('\nüéâ Toutes les v√©rifications sont pass√©es ! Le widget devrait fonctionner.');
  
  // V√©rifier les logs de debug
  const debugLogs = content.match(/console\.log\(\[DEBUG\].*?\)/g);
  if (debugLogs) {
    console.log('\nüîç Logs de debug trouv√©s:');
    debugLogs.slice(0, 5).forEach(log => {
      console.log(`  - ${log}`);
    });
  }
  
  // V√©rifier les erreurs potentielles
  const errorHandling = content.match(/catch.*?err.*?console\.error/g);
  if (errorHandling) {
    console.log('\n‚ö†Ô∏è  Gestion d\'erreurs trouv√©e:');
    errorHandling.slice(0, 3).forEach(error => {
      console.log(`  - ${error.substring(0, 50)}...`);
    });
  }
  
} else {
  console.log('\n‚ùå Certaines v√©rifications ont √©chou√©. Le widget pourrait ne pas fonctionner correctement.');
}

console.log('\nüîß Prochaines √©tapes:');
console.log('1. V√©rifier la console du navigateur pour les erreurs JavaScript');
console.log('2. S\'assurer que les donn√©es sont bien pass√©es au widget');
console.log('3. V√©rifier que le widget est bien appel√© dans renderWidgetContent'); 