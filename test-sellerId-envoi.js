// Test complet pour diagnostiquer le probl√®me sellerId
// Copiez ce code dans la console du navigateur (F12) sur la page SellEquipment

console.log("üîç DIAGNOSTIC COMPLET SELLERID");

// 1. V√©rifier l'utilisateur connect√©
async function checkUser() {
  console.log("1Ô∏è‚É£ V√©rification de l'utilisateur...");
  
  try {
    const { data: { session } } = await supabase.auth.getSession();
    const user = session?.user;
    
    if (!user) {
      console.error("‚ùå Aucun utilisateur connect√©");
      return null;
    }
    
    console.log("‚úÖ Utilisateur connect√©:", user);
    console.log("üÜî ID:", user.id);
    console.log("üìß Email:", user.email);
    console.log("üÜî Type de l'ID:", typeof user.id);
    console.log("üÜî ID est truthy:", !!user.id);
    
    return user;
  } catch (error) {
    console.error("‚ùå Erreur lors de la v√©rification:", error);
    return null;
  }
}

// 2. Tester la fonction getCurrentUser
async function testGetCurrentUser() {
  console.log("\n2Ô∏è‚É£ Test de getCurrentUser()...");
  
  try {
    const user = await getCurrentUser();
    console.log("‚úÖ getCurrentUser() fonctionne:", user);
    console.log("üÜî ID via getCurrentUser:", user?.id);
    return user;
  } catch (error) {
    console.error("‚ùå getCurrentUser() √©choue:", error);
    return null;
  }
}

// 3. Simuler l'envoi JSON complet
async function testJsonSend() {
  console.log("\n3Ô∏è‚É£ Test d'envoi JSON complet...");
  
  const user = await getCurrentUser();
  if (!user) {
    console.error("‚ùå Impossible de r√©cup√©rer l'utilisateur");
    return;
  }
  
  // Cr√©er un fichier Excel de test
  const testData = [
    { marque: 'Test', modele: 'Test', type: 'Test', annee: 2020, prix_euros: 1000 }
  ];
  
  const ws = XLSX.utils.json_to_sheet(testData);
  const wb = XLSX.utils.book_new();
  XLSX.utils.book_append_sheet(wb, ws, "Test");
  const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });
  const testFile = new File([excelBuffer], 'test.xlsx', { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
  
  // Convertir en base64
  const arrayBuffer = await testFile.arrayBuffer();
  const base64 = btoa(String.fromCharCode(...new Uint8Array(arrayBuffer)));
  
  // Pr√©parer les donn√©es JSON
  const jsonData = {
    excelFile: {
      name: testFile.name,
      type: testFile.type,
      size: testFile.size,
      data: base64
    },
    sellerId: user.id,
    imageLinks: []
  };
  
  console.log("üì¶ Donn√©es JSON pr√©par√©es:");
  console.log("  - Nom du fichier:", jsonData.excelFile.name);
  console.log("  - Taille:", jsonData.excelFile.size);
  console.log("  - SellerId:", jsonData.sellerId);
  console.log("  - Type du sellerId:", typeof jsonData.sellerId);
  console.log("  - SellerId est truthy:", !!jsonData.sellerId);
  console.log("  - Liens d'images:", jsonData.imageLinks.length);
  
  // V√©rifier que le sellerId est bien l√†
  if (!jsonData.sellerId) {
    console.error("‚ùå CRITIQUE: Le sellerId n'est pas dans les donn√©es JSON!");
    return;
  }
  
  console.log("‚úÖ Le sellerId est pr√©sent dans les donn√©es JSON");
  
  // Test d'envoi r√©el vers n8n
  try {
    console.log("üöÄ Envoi vers n8n...");
    console.log("üöÄ URL:", 'https://n8n.srv786179.hstgr.cloud/webhook/import_parc_excel');
    console.log("üöÄ Headers:", { 
      'Content-Type': 'application/json',
      'x-auth-token': 'minegrid-secret-token-2025'
    });
    
    const response = await fetch('https://n8n.srv786179.hstgr.cloud/webhook/import_parc_excel', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'x-auth-token': 'minegrid-secret-token-2025'
      },
      body: JSON.stringify(jsonData),
    });
    
    console.log("üìä Status HTTP:", response.status);
    console.log("üìä Headers de r√©ponse:", Object.fromEntries(response.headers.entries()));
    
    const responseText = await response.text();
    console.log("üì® R√©ponse brute:", responseText);
    
    try {
      const responseJson = JSON.parse(responseText);
      console.log("üì® R√©ponse JSON:", responseJson);
    } catch {
      console.log("üì® R√©ponse n'est pas du JSON valide");
    }
    
  } catch (error) {
    console.error("‚ùå Erreur envoi:", error);
  }
}

// 4. V√©rifier les machines existantes
async function checkExistingMachines() {
  console.log("\n4Ô∏è‚É£ V√©rification des machines existantes...");
  
  try {
    const { data, error } = await supabase
      .from('machines')
      .select('*')
      .limit(10);
    
    if (error) {
      console.error("‚ùå Erreur r√©cup√©ration machines:", error);
      return;
    }
    
    console.log("üìä Machines existantes:", data?.length || 0);
    
    if (data && data.length > 0) {
      console.log("üÜî SellerIds utilis√©s:");
      const sellerIds = [...new Set(data.map(m => m.sellerId))];
      sellerIds.forEach(id => console.log(`  - ${id}`));
      
      // V√©rifier les machines de l'utilisateur actuel
      const user = await getCurrentUser();
      if (user) {
        const myMachines = data.filter(m => m.sellerId === user.id);
        console.log(`üìä Mes machines (sellerId: ${user.id}):`, myMachines.length);
      }
    }
  } catch (error) {
    console.error("‚ùå Erreur lors de la v√©rification:", error);
  }
}

// 5. Test de cr√©ation manuelle
async function testManualCreation() {
  console.log("\n5Ô∏è‚É£ Test de cr√©ation manuelle...");
  
  const user = await getCurrentUser();
  if (!user) {
    console.error("‚ùå Impossible de r√©cup√©rer l'utilisateur");
    return;
  }
  
  const testMachine = {
    name: "Test Machine - " + new Date().toISOString(),
    brand: "Test Brand",
    model: "Test Model",
    category: "Test",
    year: 2024,
    price: 10000,
    condition: "used",
    description: "Machine de test pour v√©rifier le sellerId",
    sellerId: user.id,
    specifications: {
      weight: "1000",
      dimensions: "",
      power: {
        value: "100",
        unit: "kW"
      },
      operatingCapacity: "5000",
      workingWeight: "1000"
    },
    images: []
  };
  
  console.log("üì¶ Machine de test √† cr√©er:", testMachine);
  console.log("üÜî SellerId utilis√©:", testMachine.sellerId);
  
  try {
    const { data, error } = await supabase
      .from('machines')
      .insert([testMachine])
      .select();
    
    if (error) {
      console.error("‚ùå Erreur cr√©ation:", error);
    } else {
      console.log("‚úÖ Machine cr√©√©e avec succ√®s:", data);
    }
  } catch (error) {
    console.error("‚ùå Erreur lors de la cr√©ation:", error);
  }
}

// Ex√©cuter tous les tests
async function runAllTests() {
  console.log("üöÄ D√âMARRAGE DES TESTS COMPLETS SELLERID");
  console.log("=" .repeat(60));
  
  await checkUser();
  await testGetCurrentUser();
  await testJsonSend();
  await checkExistingMachines();
  await testManualCreation();
  
  console.log("=" .repeat(60));
  console.log("üèÅ FIN DES TESTS COMPLETS SELLERID");
}

// Exporter les fonctions pour utilisation manuelle
window.debugSellerIdComplete = {
  checkUser,
  testGetCurrentUser,
  testJsonSend,
  checkExistingMachines,
  testManualCreation,
  runAllTests
};

// Ex√©cuter automatiquement
runAllTests(); 