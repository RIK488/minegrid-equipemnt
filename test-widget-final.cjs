const fs = require('fs');
const path = require('path');

console.log('üß™ Test final du widget d\'√©volution des ventes enrichi...');

// V√©rifier que les fichiers existent
const dashboardPath = path.join(__dirname, 'src', 'pages', 'EnterpriseDashboard.tsx');
const widgetPath = path.join(__dirname, 'src', 'pages', 'SalesEvolutionWidgetEnriched.tsx');

if (!fs.existsSync(dashboardPath)) {
  console.error('‚ùå Fichier EnterpriseDashboard.tsx non trouv√©');
  process.exit(1);
}

if (!fs.existsSync(widgetPath)) {
  console.error('‚ùå Fichier SalesEvolutionWidgetEnriched.tsx non trouv√©');
  process.exit(1);
}

// Lire les fichiers
const dashboardContent = fs.readFileSync(dashboardPath, 'utf8');
const widgetContent = fs.readFileSync(widgetPath, 'utf8');

// V√©rifications
const checks = [
  {
    name: 'Import du widget dans EnterpriseDashboard',
    test: dashboardContent.includes('import SalesEvolutionWidgetEnriched from \'./SalesEvolutionWidgetEnriched\';'),
    success: '‚úÖ Import correct',
    error: '‚ùå Import manquant'
  },
  {
    name: 'Composant SalesEvolutionWidgetEnriched d√©fini',
    test: widgetContent.includes('const SalesEvolutionWidgetEnriched: React.FC<SalesEvolutionWidgetEnrichedProps>'),
    success: '‚úÖ Composant d√©fini',
    error: '‚ùå Composant non trouv√©'
  },
  {
    name: 'Interface SalesData avec propri√©t√©s optionnelles',
    test: widgetContent.includes('target?: number;') && widgetContent.includes('growth?: number;'),
    success: '‚úÖ Interface compatible',
    error: '‚ùå Interface incompatible'
  },
  {
    name: 'Fonction renderWidgetContent utilise le widget',
    test: dashboardContent.includes('return <SalesEvolutionWidgetEnriched data={chartData} />;'),
    success: '‚úÖ Widget utilis√© dans renderWidgetContent',
    error: '‚ùå Widget non utilis√©'
  },
  {
    name: 'Fonction getChartData existe',
    test: dashboardContent.includes('const getChartData = (widgetId: string) => {'),
    success: '‚úÖ Fonction getChartData trouv√©e',
    error: '‚ùå Fonction getChartData manquante'
  },
  {
    name: 'Donn√©es sales-evolution dans getChartData',
    test: dashboardContent.includes('\'sales-evolution\':'),
    success: '‚úÖ Donn√©es sales-evolution trouv√©es',
    error: '‚ùå Donn√©es sales-evolution manquantes'
  },
  {
    name: 'Export par d√©faut du widget',
    test: widgetContent.includes('export default SalesEvolutionWidgetEnriched;'),
    success: '‚úÖ Export par d√©faut correct',
    error: '‚ùå Export par d√©faut manquant'
  }
];

console.log('\nüìã R√©sultats des v√©rifications:');
let allPassed = true;

checks.forEach(check => {
  if (check.test) {
    console.log(check.success);
  } else {
    console.log(check.error);
    allPassed = false;
  }
});

if (allPassed) {
  console.log('\nüéâ Toutes les v√©rifications sont pass√©es !');
  console.log('\n‚úÖ Le widget d\'√©volution des ventes enrichi est pr√™t √† √™tre utilis√© !');
  console.log('\nüìä Fonctionnalit√©s disponibles :');
  console.log('  - Graphique interactif avec s√©lection de p√©riode (6m, 12m, 24m)');
  console.log('  - S√©lection de m√©trique (CA, Unit√©s, Croissance)');
  console.log('  - Statistiques d√©taill√©es (CA total, unit√©s vendues, croissance)');
  console.log('  - Analyse des performances (meilleur/pire mois)');
  console.log('  - Tableau d√©taill√© mensuel');
  console.log('  - Objectifs et actions');
  console.log('  - Compatible avec les donn√©es existantes du dashboard');
  
  console.log('\nüîß Prochaines √©tapes :');
  console.log('1. Red√©marrer le serveur de d√©veloppement');
  console.log('2. Naviguer vers le dashboard d\'entreprise');
  console.log('3. V√©rifier que le widget "√âvolution des Ventes" s\'affiche correctement');
  console.log('4. Tester les interactions (changement de p√©riode, m√©trique)');
  
} else {
  console.log('\n‚ùå Certaines v√©rifications ont √©chou√©.');
  console.log('üîß V√©rifiez les erreurs ci-dessus et corrigez-les.');
}

// V√©rifier la taille des fichiers
const dashboardSize = fs.statSync(dashboardPath).size;
const widgetSize = fs.statSync(widgetPath).size;

console.log('\nüìä Informations sur les fichiers :');
console.log(`  - EnterpriseDashboard.tsx: ${(dashboardSize / 1024).toFixed(1)} KB`);
console.log(`  - SalesEvolutionWidgetEnriched.tsx: ${(widgetSize / 1024).toFixed(1)} KB`);
console.log(`  - Total: ${((dashboardSize + widgetSize) / 1024).toFixed(1)} KB`); 