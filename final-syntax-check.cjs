const fs = require('fs');
const path = require('path');

console.log('üîç V√©rification finale de la syntaxe...\n');

function checkAndFixSyntax(filePath, description) {
  console.log(`üìÅ V√©rification de ${description}:`);
  
  if (!fs.existsSync(filePath)) {
    console.log(`   ‚ùå Fichier non trouv√©: ${filePath}`);
    return false;
  }
  
  try {
    let content = fs.readFileSync(filePath, 'utf8');
    let modified = false;
    
    // Correction 1: Supprimer les balises div en trop √† la fin
    const divEndPattern = /(\s*<\/div>\s*){2,}/g;
    if (divEndPattern.test(content)) {
      console.log('   üîß Suppression des balises div en trop √† la fin');
      content = content.replace(/(\s*<\/div>\s*){2,}/g, '\n    </div>');
      modified = true;
    }
    
    // Correction 2: Corriger les points-virgules manquants dans les objets
    const missingSemicolonPattern = /(\s+)(true|false)(\s*\n\s*)([a-zA-Z_$][a-zA-Z0-9_$]*\s*:)/g;
    if (missingSemicolonPattern.test(content)) {
      console.log('   üîß Ajout des virgules manquantes dans les objets');
      content = content.replace(/(\s+)(true|false)(\s*\n\s*)([a-zA-Z_$][a-zA-Z0-9_$]*\s*:)/g, '$1$2,$3$4');
      modified = true;
    }
    
    // Correction 3: Corriger les balises JSX mal ferm√©es
    const jsxPattern = /<([a-zA-Z][a-zA-Z0-9]*)[^>]*>[^<]*$/gm;
    const lines = content.split('\n');
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i];
      if (jsxPattern.test(line) && !line.includes('</') && !line.includes('/>')) {
        const tagMatch = line.match(/<([a-zA-Z][a-zA-Z0-9]*)[^>]*>/);
        if (tagMatch) {
          const tagName = tagMatch[1];
          const nextLine = lines[i + 1]?.trim() || '';
          if (nextLine && !nextLine.startsWith('</') && !nextLine.startsWith('{') && !nextLine.startsWith('//')) {
            console.log(`   üîß Ajout de la balise fermante </${tagName}> √† la ligne ${i + 1}`);
            lines[i] = line + `</${tagName}>`;
            modified = true;
          }
        }
      }
    }
    
    if (modified) {
      content = lines.join('\n');
      fs.writeFileSync(filePath, content, 'utf8');
      console.log('   ‚úÖ Fichier corrig√© et sauvegard√©');
      return true;
    } else {
      console.log('   ‚úÖ Aucune correction n√©cessaire');
      return true;
    }
    
  } catch (error) {
    console.log(`   ‚ùå Erreur lors de la v√©rification: ${error.message}`);
    return false;
  }
}

// V√©rifier les fichiers principaux
const filesToCheck = [
  {
    path: 'src/pages/VendeurDashboardRestored.tsx',
    description: 'Dashboard Vendeur Restaur√©'
  },
  {
    path: 'src/pages/widgets/VendeurWidgets.tsx',
    description: 'Widgets Vendeur'
  },
  {
    path: 'src/pages/EnterpriseDashboardModular.tsx',
    description: 'Dashboard Enterprise Modulaire'
  }
];

let allGood = true;

filesToCheck.forEach(file => {
  const result = checkAndFixSyntax(file.path, file.description);
  if (!result) {
    allGood = false;
  }
  console.log('');
});

// V√©rifier la structure JSX finale
console.log('üîç V√©rification de la structure JSX finale...');

filesToCheck.forEach(file => {
  if (fs.existsSync(file.path)) {
    const content = fs.readFileSync(file.path, 'utf8');
    
    // Compter les balises
    const openTags = (content.match(/<[^/][^>]*>/g) || []).filter(tag => !tag.includes('/>')).length;
    const closeTags = (content.match(/<\/[^>]*>/g) || []).length;
    
    console.log(`   üìä ${file.description}: ${openTags} ouvertes, ${closeTags} ferm√©es`);
    
    if (openTags !== closeTags) {
      console.log(`   ‚ö†Ô∏è  D√©s√©quilibre d√©tect√© dans ${file.description}`);
      allGood = false;
    }
  }
});

console.log('');

if (allGood) {
  console.log('üéâ Toutes les v√©rifications sont pass√©es avec succ√®s !');
  console.log('‚úÖ Les fichiers sont maintenant syntaxiquement corrects.');
  console.log('üîÑ Le serveur de d√©veloppement devrait fonctionner sans erreurs.');
} else {
  console.log('‚ö†Ô∏è  Des probl√®mes persistent.');
  console.log('üîß Veuillez v√©rifier manuellement les fichiers probl√©matiques.');
}

console.log('\nüí° Prochaines √©tapes:');
console.log('   1. Relancez le serveur de d√©veloppement');
console.log('   2. Testez les fonctionnalit√©s des widgets');
console.log('   3. V√©rifiez que le d√©placement et redimensionnement fonctionnent');
console.log('   4. Testez les modals et les onglets IA'); 