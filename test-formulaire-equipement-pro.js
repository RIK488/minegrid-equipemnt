// Test pour v√©rifier le fonctionnement du formulaire d'√©quipement Pro
console.log("üß™ TEST FORMULAIRE √âQUIPEMENT PRO");

function testFormulaireEquipementPro() {
  try {
    // 1. V√©rifier que nous sommes sur le portail pro
    if (!window.location.hash.includes('#pro')) {
      console.error("‚ùå Vous devez √™tre sur le portail pro pour ce test");
      console.log("üí° Allez sur: localhost:5173/#pro");
      return;
    }

    console.log("‚úÖ Page portail pro d√©tect√©e");

    // 2. Aller sur l'onglet √©quipement
    console.log("üîÑ Navigation vers l'onglet √©quipement...");
    
    const equipmentTab = Array.from(document.querySelectorAll('button')).find(button => 
      button.textContent && button.textContent.includes('√âquipements')
    );
    
    if (equipmentTab) {
      equipmentTab.click();
      console.log("‚úÖ Onglet √©quipement cliqu√©");
      
      // Attendre que l'onglet se charge
      setTimeout(() => {
        testBoutonAjouterEquipement();
      }, 500);
    } else {
      console.error("‚ùå Onglet √©quipement non trouv√©");
    }

  } catch (error) {
    console.error("‚ùå Erreur lors du test:", error);
  }
}

function testBoutonAjouterEquipement() {
  try {
    // 3. Chercher le bouton "Ajouter un √©quipement"
    const addButton = Array.from(document.querySelectorAll('button')).find(button => 
      button.textContent && button.textContent.includes('Ajouter un √©quipement')
    );

    if (!addButton) {
      console.error("‚ùå Bouton 'Ajouter un √©quipement' non trouv√©");
      return;
    }

    console.log("‚úÖ Bouton 'Ajouter un √©quipement' trouv√©");

    // 4. Cliquer sur le bouton
    console.log("üîÑ Clic sur le bouton 'Ajouter un √©quipement'...");
    addButton.click();

    // 5. Attendre que le modal s'ouvre
    setTimeout(() => {
      testModalChoix();
    }, 500);

  } catch (error) {
    console.error("‚ùå Erreur lors du test du bouton:", error);
  }
}

function testModalChoix() {
  try {
    // 6. V√©rifier que le modal de choix s'est ouvert
    const modal = document.querySelector('.fixed.inset-0');
    if (!modal) {
      console.error("‚ùå Modal de choix non trouv√©");
      return;
    }

    console.log("‚úÖ Modal de choix ouvert");

    // 7. Chercher le bouton "√âquipement Pro"
    const proButton = Array.from(modal.querySelectorAll('button')).find(button => 
      button.textContent && button.textContent.includes('√âquipement Pro')
    );

    if (!proButton) {
      console.error("‚ùå Bouton '√âquipement Pro' non trouv√©");
      return;
    }

    console.log("‚úÖ Bouton '√âquipement Pro' trouv√©");

    // 8. Cliquer sur "√âquipement Pro"
    console.log("üîÑ Clic sur '√âquipement Pro'...");
    proButton.click();

    // 9. Attendre que le formulaire s'ouvre
    setTimeout(() => {
      testFormulaire();
    }, 500);

  } catch (error) {
    console.error("‚ùå Erreur lors du test du modal de choix:", error);
  }
}

function testFormulaire() {
  try {
    // 10. V√©rifier que le formulaire s'est ouvert
    const formModal = document.querySelector('.fixed.inset-0');
    if (!formModal) {
      console.error("‚ùå Formulaire non trouv√©");
      return;
    }

    console.log("‚úÖ Formulaire d'√©quipement Pro ouvert");

    // 11. V√©rifier les champs du formulaire
    const requiredFields = [
      'Num√©ro de s√©rie',
      'Type d\'√©quipement'
    ];

    const formFields = formModal.querySelectorAll('label');
    console.log(`üìã Nombre de champs trouv√©s: ${formFields.length}`);

    requiredFields.forEach(fieldName => {
      const field = Array.from(formFields).find(label => 
        label.textContent && label.textContent.includes(fieldName)
      );
      
      if (field) {
        console.log(`‚úÖ Champ requis trouv√©: ${fieldName}`);
      } else {
        console.log(`‚ö†Ô∏è Champ requis manquant: ${fieldName}`);
      }
    });

    // 12. Tester le remplissage du formulaire
    console.log("üîÑ Test de remplissage du formulaire...");
    
    // Num√©ro de s√©rie
    const serialInput = formModal.querySelector('input[type="text"]');
    if (serialInput) {
      serialInput.value = 'TEST-001';
      serialInput.dispatchEvent(new Event('input', { bubbles: true }));
      console.log("‚úÖ Num√©ro de s√©rie rempli: TEST-001");
    }

    // Type d'√©quipement
    const typeSelect = formModal.querySelector('select');
    if (typeSelect) {
      typeSelect.value = 'Pelle hydraulique';
      typeSelect.dispatchEvent(new Event('change', { bubbles: true }));
      console.log("‚úÖ Type d'√©quipement s√©lectionn√©: Pelle hydraulique");
    }

    // Marque
    const brandInputs = formModal.querySelectorAll('input[type="text"]');
    if (brandInputs.length > 1) {
      brandInputs[1].value = 'CAT';
      brandInputs[1].dispatchEvent(new Event('input', { bubbles: true }));
      console.log("‚úÖ Marque remplie: CAT");
    }

    // Mod√®le
    if (brandInputs.length > 2) {
      brandInputs[2].value = '320D';
      brandInputs[2].dispatchEvent(new Event('input', { bubbles: true }));
      console.log("‚úÖ Mod√®le rempli: 320D");
    }

    // 13. V√©rifier le bouton de soumission
    const submitButton = formModal.querySelector('button[type="submit"]');
    if (submitButton) {
      console.log("‚úÖ Bouton de soumission trouv√©");
      console.log(`üìù Texte du bouton: "${submitButton.textContent}"`);
      
      // V√©rifier si le bouton est d√©sactiv√©
      if (submitButton.disabled) {
        console.log("‚ö†Ô∏è Bouton de soumission d√©sactiv√© (normal si validation requise)");
      } else {
        console.log("‚úÖ Bouton de soumission actif");
      }
    } else {
      console.error("‚ùå Bouton de soumission non trouv√©");
    }

    // 14. Tester la fermeture du formulaire
    const closeButton = formModal.querySelector('button[class*="text-gray-400"]');
    if (closeButton) {
      console.log("‚úÖ Bouton de fermeture trouv√©");
      
      // Fermer le formulaire
      console.log("üîÑ Fermeture du formulaire...");
      closeButton.click();
      console.log("‚úÖ Formulaire ferm√©");
    }

    console.log("‚úÖ Test du formulaire d'√©quipement Pro termin√© avec succ√®s");

  } catch (error) {
    console.error("‚ùå Erreur lors du test du formulaire:", error);
  }
}

// Fonction pour tester manuellement
function testManuel() {
  console.log("üîß TEST MANUEL - Instructions:");
  console.log("1. Allez sur l'onglet '√âquipements'");
  console.log("2. Cliquez sur 'Ajouter un √©quipement'");
  console.log("3. Cliquez sur '√âquipement Pro'");
  console.log("4. V√©rifiez que le formulaire s'ouvre avec tous les champs");
  console.log("5. Remplissez les champs obligatoires:");
  console.log("   - Num√©ro de s√©rie: TEST-001");
  console.log("   - Type d'√©quipement: Pelle hydraulique");
  console.log("6. Cliquez sur 'Ajouter l'√©quipement'");
  console.log("7. V√©rifiez que l'√©quipement appara√Æt dans la liste");
}

// Ex√©cuter le test automatique
testFormulaireEquipementPro();

// Exposer les fonctions pour les tests manuels
window.testFormulaireEquipementPro = testFormulaireEquipementPro;
window.testManuel = testManuel; 