#!/usr/bin/env node

/**
 * Script de v√©rification de l'int√©gration des widgets vendeurs
 * V√©rifie que toutes les composantes additionnelles sont bien int√©gr√©es
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Configuration des widgets attendus avec leurs composantes
const expectedWidgets = {
  'sales-metrics': {
    title: 'Score de Performance Commerciale',
    features: ['aiRecommendations', 'benchmarking', 'periodSelector', 'export', 'analytics', 'alerts'],
    description: 'Score global sur 100, comparaison avec objectif, rang anonymis√©, recommandations IA'
  },
  'sales-evolution': {
    title: '√âvolution des ventes enrichie',
    features: ['sectorComparison', 'autoNotifications', 'quickActions', 'periodSelector', 'export', 'analytics', 'alerts'],
    description: 'Courbe avec benchmarking secteur, notifications automatiques, actions rapides'
  },
  'stock-status': {
    title: 'Plan d\'action stock & revente',
    features: ['stockAnalytics', 'recommendations', 'quickActions', 'export', 'analytics', 'alerts'],
    description: 'Statut stock dormant, recommandations automatiques, actions rapides'
  },
  'sales-pipeline': {
    title: 'Assistant Prospection Active',
    features: ['autoReminders', 'probabilityScoring', 'smartActions', 'periodSelector', 'export', 'analytics', 'alerts'],
    description: 'Alertes de relance, score de probabilit√©, actions intelligentes'
  },
  'daily-actions': {
    title: 'Actions prioritaires du jour',
    features: ['aiGenerated', 'dynamicContent', 'stickyDisplay', 'alerts'],
    description: 'Liste dynamique de 3-5 actions g√©n√©r√©es par IA pour vendre plus'
  }
};

// Composants React attendus
const expectedComponents = [
  'PerformanceScoreWidget',
  'SalesEvolutionWidget', 
  'StockActionWidget',
  'ProspectionAssistantWidget',
  'DailyActionsWidget'
];

function checkFileExists(filePath) {
  return fs.existsSync(filePath);
}

function readFileContent(filePath) {
  try {
    return fs.readFileSync(filePath, 'utf8');
  } catch (error) {
    return null;
  }
}

function checkWidgetsInFile(filePath, fileType) {
  console.log(`\nüîç V√©rification du fichier ${filePath}...`);
  
  const content = readFileContent(filePath);
  if (!content) {
    console.log(`‚ùå Fichier non trouv√©: ${filePath}`);
    return false;
  }

  let allWidgetsFound = true;
  let allFeaturesFound = true;

  // V√©rifier chaque widget attendu
  for (const [widgetId, expected] of Object.entries(expectedWidgets)) {
    console.log(`\n  üìä V√©rification du widget: ${expected.title}`);
    
    // V√©rifier que le widget existe
    const widgetFound = content.includes(`id: '${widgetId}'`) || content.includes(`"id": "${widgetId}"`);
    if (!widgetFound) {
      console.log(`    ‚ùå Widget ${widgetId} non trouv√©`);
      allWidgetsFound = false;
    } else {
      console.log(`    ‚úÖ Widget ${widgetId} trouv√©`);
    }

    // V√©rifier le titre
    const titleFound = content.includes(expected.title);
    if (!titleFound) {
      console.log(`    ‚ùå Titre "${expected.title}" non trouv√©`);
      allWidgetsFound = false;
    } else {
      console.log(`    ‚úÖ Titre "${expected.title}" trouv√©`);
    }

    // V√©rifier la description
    const descriptionFound = content.includes(expected.description);
    if (!descriptionFound) {
      console.log(`    ‚ùå Description non trouv√©e`);
      allWidgetsFound = false;
    } else {
      console.log(`    ‚úÖ Description trouv√©e`);
    }

    // V√©rifier les features
    for (const feature of expected.features) {
      const featureFound = content.includes(feature);
      if (!featureFound) {
        console.log(`    ‚ùå Feature "${feature}" non trouv√©e`);
        allFeaturesFound = false;
      } else {
        console.log(`    ‚úÖ Feature "${feature}" trouv√©e`);
      }
    }
  }

  return allWidgetsFound && allFeaturesFound;
}

function checkComponentsInFile(filePath) {
  console.log(`\nüîç V√©rification des composants React dans ${filePath}...`);
  
  const content = readFileContent(filePath);
  if (!content) {
    console.log(`‚ùå Fichier non trouv√©: ${filePath}`);
    return false;
  }

  let allComponentsFound = true;

  for (const component of expectedComponents) {
    const componentFound = content.includes(`export const ${component}`) || content.includes(`const ${component}`);
    if (!componentFound) {
      console.log(`    ‚ùå Composant ${component} non trouv√©`);
      allComponentsFound = false;
    } else {
      console.log(`    ‚úÖ Composant ${component} trouv√©`);
    }
  }

  return allComponentsFound;
}

function checkExportsInIndex() {
  console.log(`\nüîç V√©rification des exports dans index.js...`);
  
  const indexPath = path.join(__dirname, 'src', 'pages', 'widgets', 'index.js');
  const content = readFileContent(indexPath);
  
  if (!content) {
    console.log(`‚ùå Fichier index.js non trouv√©`);
    return false;
  }

  // V√©rifier l'export des widgets
  const widgetsExportFound = content.includes('export { VendeurWidgets }');
  const tsExportFound = content.includes('export { VendeurWidgets as VendeurWidgetsTS');
  const componentsExportFound = content.includes('PerformanceScoreWidget');

  console.log(`    ${widgetsExportFound ? '‚úÖ' : '‚ùå'} Export VendeurWidgets`);
  console.log(`    ${tsExportFound ? '‚úÖ' : '‚ùå'} Export VendeurWidgetsTS`);
  console.log(`    ${componentsExportFound ? '‚úÖ' : '‚ùå'} Export des composants React`);

  return widgetsExportFound && tsExportFound && componentsExportFound;
}

function checkEnterpriseDashboardIntegration() {
  console.log(`\nüîç V√©rification de l'int√©gration dans EnterpriseDashboard...`);
  
  const dashboardPath = path.join(__dirname, 'src', 'pages', 'EnterpriseDashboard.tsx');
  const content = readFileContent(dashboardPath);
  
  if (!content) {
    console.log(`‚ùå Fichier EnterpriseDashboard.tsx non trouv√©`);
    return false;
  }

  // V√©rifier l'import des widgets
  const importFound = content.includes('import { VendeurWidgets } from');
  console.log(`    ${importFound ? '‚úÖ' : '‚ùå'} Import VendeurWidgets`);

  // V√©rifier l'utilisation des widgets
  const usageFound = content.includes('VendeurWidgets.widgets.map');
  console.log(`    ${usageFound ? '‚úÖ' : '‚ùå'} Utilisation VendeurWidgets.widgets.map`);

  // V√©rifier les types de widgets support√©s
  const performanceTypeFound = content.includes("case 'performance'");
  const priorityTypeFound = content.includes("case 'priority'");
  
  console.log(`    ${performanceTypeFound ? '‚úÖ' : '‚ùå'} Support du type 'performance'`);
  console.log(`    ${priorityTypeFound ? '‚úÖ' : '‚ùå'} Support du type 'priority'`);

  return importFound && usageFound && performanceTypeFound && priorityTypeFound;
}

function main() {
  console.log('üöÄ V√©rification de l\'int√©gration des widgets vendeurs\n');
  console.log('=' .repeat(60));

  const srcDir = path.join(__dirname, 'src', 'pages', 'widgets');
  
  // V√©rifier le fichier JavaScript
  const jsFile = path.join(srcDir, 'VendeurWidgets.js');
  const jsOk = checkWidgetsInFile(jsFile, 'JavaScript');

  // V√©rifier le fichier TypeScript
  const tsFile = path.join(srcDir, 'VendeurWidgets.tsx');
  const tsOk = checkWidgetsInFile(tsFile, 'TypeScript');
  const componentsOk = checkComponentsInFile(tsFile);

  // V√©rifier les exports
  const exportsOk = checkExportsInIndex();

  // V√©rifier l'int√©gration dans EnterpriseDashboard
  const dashboardOk = checkEnterpriseDashboardIntegration();

  // R√©sum√©
  console.log('\n' + '=' .repeat(60));
  console.log('üìã R√âSUM√â DE LA V√âRIFICATION');
  console.log('=' .repeat(60));

  console.log(`\nüìÅ Fichier JavaScript (VendeurWidgets.js): ${jsOk ? '‚úÖ OK' : '‚ùå PROBL√àMES'}`);
  console.log(`üìÅ Fichier TypeScript (VendeurWidgets.tsx): ${tsOk ? '‚úÖ OK' : '‚ùå PROBL√àMES'}`);
  console.log(`üß© Composants React: ${componentsOk ? '‚úÖ OK' : '‚ùå PROBL√àMES'}`);
  console.log(`üì§ Exports (index.js): ${exportsOk ? '‚úÖ OK' : '‚ùå PROBL√àMES'}`);
  console.log(`üè¢ Int√©gration EnterpriseDashboard: ${dashboardOk ? '‚úÖ OK' : '‚ùå PROBL√àMES'}`);

  const allOk = jsOk && tsOk && componentsOk && exportsOk && dashboardOk;

  console.log(`\nüéØ R√âSULTAT GLOBAL: ${allOk ? '‚úÖ TOUTES LES COMPOSANTES SONT INT√âGR√âES' : '‚ùå PROBL√àMES D√âTECT√âS'}`);

  if (allOk) {
    console.log('\nüéâ F√©licitations ! Tous les widgets vendeurs sont correctement int√©gr√©s avec leurs composantes additionnelles :');
    console.log('\n‚úÖ 1. Score de Performance Commerciale - avec jauge, comparaison, rang et recommandations IA');
    console.log('‚úÖ 2. √âvolution des ventes enrichie - avec benchmarking secteur et notifications automatiques');
    console.log('‚úÖ 3. Plan d\'action stock & revente - avec statut dormant et recommandations automatiques');
    console.log('‚úÖ 4. Assistant Prospection Active - avec alertes de relance et actions intelligentes');
    console.log('‚úÖ 5. Actions prioritaires du jour - avec contenu dynamique g√©n√©r√© par IA');
  } else {
    console.log('\n‚ö†Ô∏è  Des probl√®mes ont √©t√© d√©tect√©s. Veuillez corriger les √©l√©ments manquants.');
  }

  return allOk ? 0 : 1;
}

// Ex√©cuter le script
if (import.meta.url === `file://${process.argv[1]}`) {
  process.exit(main());
}

export { main, expectedWidgets, expectedComponents }; 