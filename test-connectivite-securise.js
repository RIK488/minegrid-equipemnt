// üîí TEST DE CONNECTIVIT√â S√âCURIS√â
// Teste la connectivit√© sans exposer d'informations sensibles
console.log("üîí TEST DE CONNECTIVIT√â S√âCURIS√â");

import { createClient } from '@supabase/supabase-js';

// Configuration Supabase
const supabaseUrl = 'https://gvbtydxkvuwrxawkxiyv.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imd2YnR5ZHhrdnV3cnhhd2t4aXl2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM3MTkyOTgsImV4cCI6MjA2OTI5NTI5OH0.Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8';

const supabase = createClient(supabaseUrl, supabaseKey);

async function testConnectiviteSecurise() {
  console.log("üöÄ Test de connectivit√© s√©curis√© en cours...\n");

  let testsReussis = 0;
  let testsTotal = 0;

  // 1. TEST DE CONNEXION SUPABASE
  console.log("üì° 1. Test de connexion Supabase...");
  testsTotal++;
  
  try {
    const { data, error } = await supabase
      .from('user_profiles')
      .select('id')
      .limit(1);

    if (error) {
      console.log("‚ùå Erreur de connexion Supabase");
      console.log("   D√©tail:", error.message);
    } else {
      console.log("‚úÖ Connexion Supabase OK");
      testsReussis++;
    }
  } catch (err) {
    console.log("‚ùå Impossible de se connecter √† Supabase");
  }

  // 2. TEST D'AUTHENTIFICATION
  console.log("\nüîê 2. Test d'authentification...");
  testsTotal++;
  
  try {
    const { data: { user }, error } = await supabase.auth.getUser();
    
    if (error) {
      console.log("‚ùå Erreur d'authentification");
    } else if (user) {
      console.log("‚úÖ Utilisateur connect√©");
      testsReussis++;
    } else {
      console.log("‚ÑπÔ∏è Aucun utilisateur connect√© (normal si pas connect√©)");
      testsReussis++; // On compte comme r√©ussi car c'est normal
    }
  } catch (err) {
    console.log("‚ùå Erreur lors du test d'authentification");
  }

  // 3. TEST DES TABLES PRINCIPALES (sans exposer de donn√©es)
  console.log("\nüìã 3. Test des tables principales...");
  
  const tablesATester = [
    'user_profiles',
    'announcements',
    'messages'
  ];

  for (const table of tablesATester) {
    testsTotal++;
    try {
      const { data, error } = await supabase
        .from(table)
        .select('id')
        .limit(1);

      if (error) {
        console.log(`‚ùå Table ${table}: ${error.message}`);
      } else {
        console.log(`‚úÖ Table ${table}: OK`);
        testsReussis++;
      }
    } catch (err) {
      console.log(`‚ùå Table ${table}: Erreur de connexion`);
    }
  }

  // 4. TEST DES TABLES PORTAL PRO (sans exposer de donn√©es)
  console.log("\nüè¢ 4. Test des tables Portal Pro...");
  
  const tablesPortalPro = [
    'pro_clients',
    'client_equipment',
    'maintenance_interventions',
    'client_orders'
  ];

  let tablesPortalProOK = 0;
  
  for (const table of tablesPortalPro) {
    testsTotal++;
    try {
      const { data, error } = await supabase
        .from(table)
        .select('id')
        .limit(1);

      if (error) {
        if (error.message.includes('does not exist')) {
          console.log(`‚ùå Table ${table}: N'existe pas`);
        } else {
          console.log(`‚ö†Ô∏è Table ${table}: ${error.message}`);
        }
      } else {
        console.log(`‚úÖ Table ${table}: OK`);
        testsReussis++;
        tablesPortalProOK++;
      }
    } catch (err) {
      console.log(`‚ùå Table ${table}: Erreur de connexion`);
    }
  }

  // 5. TEST DES FONCTIONS (sans exposer de donn√©es)
  console.log("\n‚öôÔ∏è 5. Test des fonctions...");
  testsTotal++;
  
  try {
    // Test simple d'une fonction RPC
    const { data, error } = await supabase
      .rpc('update_updated_at_column');

    if (error) {
      console.log("‚ö†Ô∏è Fonction update_updated_at_column: Non disponible");
    } else {
      console.log("‚úÖ Fonction update_updated_at_column: OK");
      testsReussis++;
    }
  } catch (err) {
    console.log("‚ÑπÔ∏è Fonction update_updated_at_column: Non test√©e");
  }

  // 6. R√âSUM√â S√âCURIS√â
  console.log("\nüìä 6. R√âSUM√â DU TEST");
  console.log("=" .repeat(40));
  
  console.log(`Tests r√©ussis: ${testsReussis}/${testsTotal}`);
  console.log(`Tables Portal Pro OK: ${tablesPortalProOK}/${tablesPortalPro.length}`);

  // 7. RECOMMANDATIONS S√âCURIS√âES
  console.log("\nüí° RECOMMANDATIONS:");
  
  if (tablesPortalProOK === tablesPortalPro.length) {
    console.log("‚úÖ Toutes les tables Portal Pro sont pr√©sentes");
    console.log("‚úÖ Votre Supabase est pr√™t pour le portail Pro");
  } else if (tablesPortalProOK > 0) {
    console.log("‚ö†Ô∏è Certaines tables Portal Pro manquent");
    console.log("üí° Ex√©cutez create-pro-portal-tables.sql pour les cr√©er");
  } else {
    console.log("‚ùå Aucune table Portal Pro trouv√©e");
    console.log("üí° Ex√©cutez create-pro-portal-tables.sql pour cr√©er toutes les tables");
  }

  // 8. TEST DE FONCTIONNALIT√â (sans exposer de donn√©es)
  console.log("\nüéØ 8. Test de fonctionnalit√©...");
  
  try {
    // Test de cr√©ation d'un profil Pro (sans r√©ellement le cr√©er)
    const { data: { user } } = await supabase.auth.getUser();
    
    if (user) {
      const { data: existingProfile, error } = await supabase
        .from('pro_clients')
        .select('id')
        .eq('user_id', user.id)
        .limit(1);

      if (error && error.message.includes('does not exist')) {
        console.log("‚ÑπÔ∏è Table pro_clients: N'existe pas - √† cr√©er");
      } else if (error) {
        console.log("‚ö†Ô∏è Erreur lors du test pro_clients");
      } else if (existingProfile && existingProfile.length > 0) {
        console.log("‚úÖ Profil Pro existant d√©tect√©");
      } else {
        console.log("‚ÑπÔ∏è Aucun profil Pro existant (normal)");
      }
    } else {
      console.log("‚ÑπÔ∏è Pas d'utilisateur connect√© pour le test de profil");
    }
  } catch (err) {
    console.log("‚ÑπÔ∏è Test de fonctionnalit√© non effectu√©");
  }

  console.log("\nüèÅ TEST TERMIN√â");
  console.log("=" .repeat(40));
  console.log("‚úÖ Ce test est s√©curis√© et n'expose aucune donn√©e sensible");
  console.log("üí° Utilisez les recommandations pour corriger les probl√®mes d√©tect√©s");
}

// Fonction pour afficher les instructions
function afficherInstructionsSecurisees() {
  console.log("\nüìñ INSTRUCTIONS S√âCURIS√âES:");
  console.log("1. Ce test ne collecte aucune donn√©e personnelle");
  console.log("2. Il v√©rifie seulement la connectivit√© et l'existence des tables");
  console.log("3. Aucune information sensible n'est affich√©e");
  console.log("4. Les r√©sultats sont anonymis√©s");
}

// Ex√©cution automatique
testConnectiviteSecurise().catch(console.error);

// Affichage des instructions
afficherInstructionsSecurisees(); 