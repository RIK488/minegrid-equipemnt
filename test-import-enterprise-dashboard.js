// Script pour v√©rifier que le bon fichier EnterpriseDashboard est utilis√©
console.log('=== V√âRIFICATION IMPORT ENTERPRISE DASHBOARD ===');

const fs = require('fs');
const path = require('path');

// V√©rifier les fichiers existants
const files = [
  'src/pages/EnterpriseDashboard.tsx',
  'src/pages/EnterpriseDashboard.js',
  'src/pages/EnterpriseDashboard_temp.tsx',
  'src/pages/EnterpriseDashboard.tsx.backup.1751888097245'
];

console.log('\nüìÅ Fichiers EnterpriseDashboard existants:');
files.forEach(file => {
  const exists = fs.existsSync(file);
  console.log(`${exists ? '‚úÖ' : '‚ùå'} ${file} ${exists ? '(EXISTE)' : '(N\'EXISTE PAS)'}`);
});

// V√©rifier le contenu du fichier principal
const mainFile = 'src/pages/EnterpriseDashboard.tsx';
if (fs.existsSync(mainFile)) {
  console.log('\nüîç Contenu du fichier principal:');
  const content = fs.readFileSync(mainFile, 'utf8');
  
  // V√©rifier si le widget daily-actions est pr√©sent
  const hasDailyActions = content.includes('daily-actions');
  const hasGetDailyActionsData = content.includes('getDailyActionsData');
  const hasDailyActionsPriorityWidget = content.includes('DailyActionsPriorityWidget');
  
  console.log(`‚úÖ Widget daily-actions: ${hasDailyActions ? 'PR√âSENT' : 'ABSENT'}`);
  console.log(`‚úÖ Fonction getDailyActionsData: ${hasGetDailyActionsData ? 'PR√âSENTE' : 'ABSENTE'}`);
  console.log(`‚úÖ Composant DailyActionsPriorityWidget: ${hasDailyActionsPriorityWidget ? 'PR√âSENT' : 'ABSENT'}`);
  
  // V√©rifier la configuration des widgets
  const hasWidgetConfigs = content.includes('widgetConfigs');
  const hasVendeurConfig = content.includes('vendeur:');
  const hasDailyActionsInConfig = content.includes('daily-actions');
  
  console.log(`‚úÖ Configuration widgets: ${hasWidgetConfigs ? 'PR√âSENTE' : 'ABSENTE'}`);
  console.log(`‚úÖ Config m√©tier vendeur: ${hasVendeurConfig ? 'PR√âSENTE' : 'ABSENTE'}`);
  console.log(`‚úÖ daily-actions dans config: ${hasDailyActionsInConfig ? 'PR√âSENT' : 'ABSENT'}`);
  
} else {
  console.log('‚ùå Fichier principal EnterpriseDashboard.tsx introuvable!');
}

// V√©rifier l'import dans App.tsx
const appFile = 'src/App.tsx';
if (fs.existsSync(appFile)) {
  console.log('\nüì± Import dans App.tsx:');
  const appContent = fs.readFileSync(appFile, 'utf8');
  const importLine = appContent.match(/import.*EnterpriseDashboard.*from.*['"]([^'"]+)['"]/);
  
  if (importLine) {
    console.log(`‚úÖ Import trouv√©: ${importLine[0]}`);
    console.log(`‚úÖ Chemin: ${importLine[1]}`);
  } else {
    console.log('‚ùå Import EnterpriseDashboard non trouv√© dans App.tsx');
  }
}

console.log('\n=== FIN DE LA V√âRIFICATION ===');
console.log('\nüéØ Si tous les ‚úÖ sont pr√©sents, le widget devrait fonctionner.');
console.log('üîÑ Red√©marre le serveur et teste en navigation priv√©e.'); 