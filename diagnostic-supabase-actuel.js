// üîç DIAGNOSTIC COMPLET SUPABASE - √âTAT ACTUEL
console.log("üîç DIAGNOSTIC COMPLET DE LA BASE DE DONN√âES SUPABASE");

import { createClient } from '@supabase/supabase-js';

// Configuration Supabase
const supabaseUrl = 'https://gvbtydxkvuwrxawkxiyv.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imd2YnR5ZHhrdnV3cnhhd2t4aXl2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM3MTkyOTgsImV4cCI6MjA2OTI5NTI5OH0.Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8';

const supabase = createClient(supabaseUrl, supabaseKey);

async function diagnosticCompletSupabase() {
  console.log("üöÄ D√©marrage du diagnostic complet...\n");

  // 1. TABLES PRINCIPALES DU PORTAL PRO
  console.log("üìã 1. V√âRIFICATION DES TABLES PORTAL PRO");
  console.log("=" .repeat(50));
  
  const tablesPortalPro = [
    'pro_clients',
    'client_equipment', 
    'client_orders',
    'maintenance_interventions',
    'client_notifications',
    'technical_documents',
    'equipment_diagnostics',
    'client_users'
  ];

  let tablesManquantes = [];
  let tablesOK = [];

  for (const table of tablesPortalPro) {
    try {
      const { data, error } = await supabase
        .from(table)
        .select('*')
        .limit(1);

      if (error) {
        console.log(`‚ùå ${table}: ${error.message}`);
        tablesManquantes.push(table);
      } else {
        console.log(`‚úÖ ${table}: OK`);
        tablesOK.push(table);
      }
    } catch (err) {
      console.log(`‚ùå ${table}: Erreur de connexion`);
      tablesManquantes.push(table);
    }
  }

  // 2. TABLES PRINCIPALES DE L'APPLICATION
  console.log("\nüìã 2. V√âRIFICATION DES TABLES PRINCIPALES");
  console.log("=" .repeat(50));
  
  const tablesPrincipales = [
    'user_profiles',
    'announcements',
    'messages',
    'exchange_rates',
    'machine_views',
    'seller_profiles'
  ];

  for (const table of tablesPrincipales) {
    try {
      const { data, error } = await supabase
        .from(table)
        .select('*')
        .limit(1);

      if (error) {
        console.log(`‚ùå ${table}: ${error.message}`);
      } else {
        console.log(`‚úÖ ${table}: OK`);
      }
    } catch (err) {
      console.log(`‚ùå ${table}: Erreur de connexion`);
    }
  }

  // 3. V√âRIFICATION DES POLITIQUES RLS
  console.log("\nüîí 3. V√âRIFICATION DES POLITIQUES RLS");
  console.log("=" .repeat(50));

  for (const table of tablesPortalPro) {
    try {
      const { data, error } = await supabase
        .from(table)
        .select('*')
        .limit(1);

      if (error && error.message.includes('permission')) {
        console.log(`‚ö†Ô∏è ${table}: Probl√®me de permissions RLS`);
      } else if (!error) {
        console.log(`‚úÖ ${table}: Politiques RLS OK`);
      }
    } catch (err) {
      console.log(`‚ùå ${table}: Erreur de v√©rification RLS`);
    }
  }

  // 4. V√âRIFICATION DES FONCTIONS ET TRIGGERS
  console.log("\n‚öôÔ∏è 4. V√âRIFICATION DES FONCTIONS");
  console.log("=" .repeat(50));

  try {
    // Test de la fonction update_updated_at_column
    const { data, error } = await supabase
      .rpc('update_updated_at_column');

    if (error) {
      console.log(`‚ö†Ô∏è Fonction update_updated_at_column: ${error.message}`);
    } else {
      console.log(`‚úÖ Fonction update_updated_at_column: OK`);
    }
  } catch (err) {
    console.log(`‚ùå Erreur lors du test des fonctions`);
  }

  // 5. R√âSUM√â ET RECOMMANDATIONS
  console.log("\nüìä 5. R√âSUM√â DU DIAGNOSTIC");
  console.log("=" .repeat(50));

  console.log(`‚úÖ Tables Portal Pro OK: ${tablesOK.length}/${tablesPortalPro.length}`);
  console.log(`‚ùå Tables Portal Pro manquantes: ${tablesManquantes.length}`);

  if (tablesManquantes.length > 0) {
    console.log("\nüö® TABLES MANQUANTES D√âTECT√âES:");
    tablesManquantes.forEach(table => {
      console.log(`   - ${table}`);
    });

    console.log("\nüîß ACTIONS RECOMMAND√âES:");
    console.log("1. Ex√©cuter le script create-pro-portal-tables.sql dans Supabase");
    console.log("2. V√©rifier que toutes les politiques RLS sont cr√©√©es");
    console.log("3. Relancer ce diagnostic apr√®s cr√©ation");
  } else {
    console.log("\nüéâ TOUTES LES TABLES PORTAL PRO SONT PR√âSENTES!");
    console.log("‚úÖ Votre base de donn√©es Supabase est pr√™te pour le portail Pro");
  }

  // 6. TEST DE CONNEXION UTILISATEUR
  console.log("\nüë§ 6. TEST DE CONNEXION UTILISATEUR");
  console.log("=" .repeat(50));

  try {
    const { data: { user }, error } = await supabase.auth.getUser();
    
    if (error) {
      console.log(`‚ùå Erreur d'authentification: ${error.message}`);
    } else if (user) {
      console.log(`‚úÖ Utilisateur connect√©: ${user.email}`);
      
      // Test de cr√©ation de profil Pro
      const { data: profile, error: profileError } = await supabase
        .from('pro_clients')
        .select('*')
        .eq('user_id', user.id)
        .single();

      if (profileError && profileError.code === 'PGRST116') {
        console.log("‚ÑπÔ∏è Aucun profil Pro existant pour cet utilisateur");
      } else if (profileError) {
        console.log(`‚ö†Ô∏è Erreur profil Pro: ${profileError.message}`);
      } else {
        console.log(`‚úÖ Profil Pro existant: ${profile.company_name}`);
      }
    } else {
      console.log("‚ÑπÔ∏è Aucun utilisateur connect√©");
    }
  } catch (err) {
    console.log(`‚ùå Erreur lors du test utilisateur: ${err.message}`);
  }

  console.log("\nüèÅ DIAGNOSTIC TERMIN√â");
  console.log("=" .repeat(50));
}

// Fonction pour afficher les instructions
function afficherInstructions() {
  console.log("\nüìñ INSTRUCTIONS D'UTILISATION:");
  console.log("1. Copiez ce script dans la console de votre navigateur");
  console.log("2. Assurez-vous d'√™tre sur votre site (localhost:5173)");
  console.log("3. Appuyez sur Entr√©e pour ex√©cuter");
  console.log("4. V√©rifiez les r√©sultats dans la console");
}

// Ex√©cution automatique
diagnosticCompletSupabase().catch(console.error);

// Affichage des instructions
afficherInstructions(); 